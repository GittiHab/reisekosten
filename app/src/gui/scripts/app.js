// Generated by CoffeeScript 1.10.0
(function() {
  var Reise, ReiseManager, Station, Verpflegung, app, fs, path, ref, remote;

  require('angular');

  require('angular-ui-router');

  ref = require('../../core'), Reise = ref.Reise, Station = ref.Station, Verpflegung = ref.Verpflegung, ReiseManager = ref.ReiseManager;

  remote = require('electron').remote;

  fs = require('fs');

  path = require('path');

  app = angular.module('reisekostenabrechnung', ['ui.router']);

  app.config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/');
    return $stateProvider.state('overview', {
      url: '/',
      templateUrl: 'overview.html',
      controller: 'reisenController',
      controllerAs: 'reisen'
    }).state('loading', {
      url: 'loading',
      template: '<h2 style="position:absolute;top:50%;width:100%;text-align:center;' + 'font-weight:200;font-size:20px;margin-top: -10px;">Loading...</h2>'
    });
  });

  app.controller('mainController', function($scope) {
    var dataPath;
    this.adding = false;
    $scope.edit = null;
    this.openAdder = function(reise) {
      if (reise == null) {
        reise = null;
      }
      this.adding = true;
      return $scope.edit = reise;
    };
    this.closeAdder = function() {
      return this.adding = false;
    };
    this.isAdding = function() {
      return this.adding;
    };
    dataPath = remote.getGlobal('DataPath');
    $scope.manager = ReiseManager.openProject(dataPath);
  });

  app.controller('reisenController', function($scope) {
    this.deleteFields = [];
    this.deleteSelected = function() {
      var i, item, ref1, reisen, year;
      ref1 = $scope.reisen.deleteFields;
      for (year in ref1) {
        reisen = ref1[year];
        for (i in reisen) {
          item = reisen[i];
          if ((item != null) && item) {
            return true;
          }
        }
      }
      return false;
    };
    this["delete"] = function() {
      var deleteTravel, i, item, ref1, reisen, year;
      if (confirm('Unwiderruflich löschen?')) {
        deleteTravel = [];
        ref1 = $scope.reisen.deleteFields;
        for (year in ref1) {
          reisen = ref1[year];
          for (i in reisen) {
            item = reisen[i];
            if ((item != null) && item) {
              deleteTravel.push($scope.manager.reisen[year][i]);
            }
          }
        }
        deleteTravel.map(function(travel) {
          return $scope.manager.remove(travel);
        });
        this.deleteFields = [];
      }
    };
  });

  app.controller('menuController', function() {
    this.open = false;
    this.toggleMenu = function() {
      return this.open = !this.open;
    };
    this.elements = [
      {
        title: 'Einstellungen'
      }, {
        title: 'Speicherort'
      }, {
        title: 'Über'
      }
    ];
  });

  app.controller('editController', function($scope) {
    this.travel = new Reise('');
    this._edit = false;
    this.editTravel = (function(_this) {
      return function(reise) {
        _this._edit = true;
        _this.travel = reise;
      };
    })(this);
    if ($scope.edit != null) {
      this.editTravel($scope.edit);
      $scope.edit = null;
    }
    this.step = 0;
    this.steps = [
      {
        title: 'Allgemein',
        template: 'general'
      }, {
        title: 'Reiseroute',
        template: 'route'
      }, {
        title: 'Verpflegung',
        template: 'flat'
      }, {
        title: 'Belege',
        template: 'bills'
      }
    ];
    this.currentTitle = function() {
      return this.steps[this.step].title;
    };
    this.currentTemplate = function() {
      return 'edit-steps/' + this.steps[this.step].template + '.html';
    };
    this.goTo = function(index) {
      return this.step = index;
    };
    this.isStep = function(index) {
      return this.step === index;
    };
    this.next = function() {
      if (this.isLast()) {
        if (!this._edit) {
          $scope.manager.add(this.travel);
        }
        this.saveAndClose();
        return;
      }
      return this.goTo(++this.step);
    };
    this.prev = function() {
      if (this.isFirst()) {
        this.saveAndClose(false);
        return;
      }
      return this.goTo(--this.step);
    };
    this.saveAndClose = function(save) {
      if (save == null) {
        save = true;
      }
      if (this._edit || save) {
        $scope.manager.save(this.travel);
      }
      return $scope.main.closeAdder();
    };
    this.isLast = function() {
      return this.step === this.steps.length - 1;
    };
    this.isFirst = function() {
      return this.step === 0;
    };
    this.countries = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', 'data', 'countries.json')));
    this.currencies = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', 'data', 'currencies.json')));
  });

  app.directive('menu', function() {
    return {
      templateUrl: 'menu.html',
      controller: 'menuController',
      controllerAs: 'menu'
    };
  });

  app.directive('add', function() {
    return {
      templateUrl: 'edit.html',
      controller: 'editController',
      controllerAs: 'adder'
    };
  });

  app.directive('transport', function() {
    return {
      templateUrl: 'edit-steps/transport.html'
    };
  });

}).call(this);

//# sourceMappingURL=app.js.map
